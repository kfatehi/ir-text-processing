Based on my analysis, the algorithm appears to run in polynomial time complexity O(n^2 log(n))

I've also produced a runtime graph (graph.png) by running the function with randomly generated words using an 8-core linux machine over the span of several hours.

computePalindromeFrequencies =
  Full Word Loop: O(n)
    * findPalindrome =
      Partial Word Loop: O(log(n))
        * isPalindrome =
          + String Build: O(n)
          + String Reverse: O(n)
          + String Comparison: O(n)
  + HashMap Put: O(1)
  + HashMap Values to ArrayList: O(n)
  + ArrayList.sort: O(n log(n))

O(n) * ( O(log(n)) * ( O(n) + O(n) + O(n) ) ) + O(1) + O(n) + O(n log(n))
